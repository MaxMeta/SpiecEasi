// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// sqrtmNewt2
arma::mat sqrtmNewt2(arma::mat& C, arma::mat& sqrt0, const double& errTol);
RcppExport SEXP _SpiecEasi_sqrtmNewt2(SEXP CSEXP, SEXP sqrt0SEXP, SEXP errTolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sqrt0(sqrt0SEXP);
    Rcpp::traits::input_parameter< const double& >::type errTol(errTolSEXP);
    rcpp_result_gen = Rcpp::wrap(sqrtmNewt2(C, sqrt0, errTol));
    return rcpp_result_gen;
END_RCPP
}
// SOFTTHRESH2
arma::sp_mat SOFTTHRESH2(arma::mat& Sig, const float& lambda, const bool& shrinkDiag);
RcppExport SEXP _SpiecEasi_SOFTTHRESH2(SEXP SigSEXP, SEXP lambdaSEXP, SEXP shrinkDiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< const float& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type shrinkDiag(shrinkDiagSEXP);
    rcpp_result_gen = Rcpp::wrap(SOFTTHRESH2(Sig, lambda, shrinkDiag));
    return rcpp_result_gen;
END_RCPP
}
// svdPowSym
void svdPowSym(arma::mat& U, arma::vec& d, arma::mat& V, arma::mat& A, int k, int q);
RcppExport SEXP _SpiecEasi_svdPowSym(SEXP USEXP, SEXP dSEXP, SEXP VSEXP, SEXP ASEXP, SEXP kSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    svdPowSym(U, d, V, A, k, q);
    return R_NilValue;
END_RCPP
}
// softSVT3
arma::mat softSVT3(arma::mat& M, int k, double beta);
RcppExport SEXP _SpiecEasi_softSVT3(SEXP MSEXP, SEXP kSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(softSVT3(M, k, beta));
    return rcpp_result_gen;
END_RCPP
}
// softSVT2
arma::mat softSVT2(arma::mat& M, int k, double beta);
RcppExport SEXP _SpiecEasi_softSVT2(SEXP MSEXP, SEXP kSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(softSVT2(M, k, beta));
    return rcpp_result_gen;
END_RCPP
}
// ADMM
List ADMM(const arma::mat& SigmaO, const double& lambda, arma::mat& I, arma::mat& Lambda, arma::mat& Y, double beta, int r, double mu, const double& eta, const double& muf, const int& maxiter, const double& newtol, const double& tol, const double& over_relax_par, bool shrinkDiag);
RcppExport SEXP _SpiecEasi_ADMM(SEXP SigmaOSEXP, SEXP lambdaSEXP, SEXP ISEXP, SEXP LambdaSEXP, SEXP YSEXP, SEXP betaSEXP, SEXP rSEXP, SEXP muSEXP, SEXP etaSEXP, SEXP mufSEXP, SEXP maxiterSEXP, SEXP newtolSEXP, SEXP tolSEXP, SEXP over_relax_parSEXP, SEXP shrinkDiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type SigmaO(SigmaOSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const double& >::type muf(mufSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double& >::type newtol(newtolSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const double& >::type over_relax_par(over_relax_parSEXP);
    Rcpp::traits::input_parameter< bool >::type shrinkDiag(shrinkDiagSEXP);
    rcpp_result_gen = Rcpp::wrap(ADMM(SigmaO, lambda, I, Lambda, Y, beta, r, mu, eta, muf, maxiter, newtol, tol, over_relax_par, shrinkDiag));
    return rcpp_result_gen;
END_RCPP
}
// MATAVE2
arma::mat MATAVE2(arma::mat A, arma::mat B);
RcppExport SEXP _SpiecEasi_MATAVE2(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(MATAVE2(A, B));
    return rcpp_result_gen;
END_RCPP
}
// MATAVE3
arma::mat MATAVE3(arma::mat A, arma::mat B, arma::mat C);
RcppExport SEXP _SpiecEasi_MATAVE3(SEXP ASEXP, SEXP BSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(MATAVE3(A, B, C));
    return rcpp_result_gen;
END_RCPP
}
// sqrtmNewt
arma::mat sqrtmNewt(arma::mat C, SEXP sqrt0, double errTol);
RcppExport SEXP _SpiecEasi_sqrtmNewt(SEXP CSEXP, SEXP sqrt0SEXP, SEXP errTolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sqrt0(sqrt0SEXP);
    Rcpp::traits::input_parameter< double >::type errTol(errTolSEXP);
    rcpp_result_gen = Rcpp::wrap(sqrtmNewt(C, sqrt0, errTol));
    return rcpp_result_gen;
END_RCPP
}
// solveCpp
arma::mat solveCpp(arma::mat C, arma::mat X);
RcppExport SEXP _SpiecEasi_solveCpp(SEXP CSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(solveCpp(C, X));
    return rcpp_result_gen;
END_RCPP
}
// SOFTTHRESH
arma::sp_mat SOFTTHRESH(arma::mat Sig, float lambda, bool shrinkDiag);
RcppExport SEXP _SpiecEasi_SOFTTHRESH(SEXP SigSEXP, SEXP lambdaSEXP, SEXP shrinkDiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< float >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type shrinkDiag(shrinkDiagSEXP);
    rcpp_result_gen = Rcpp::wrap(SOFTTHRESH(Sig, lambda, shrinkDiag));
    return rcpp_result_gen;
END_RCPP
}
// softSVT
List softSVT(arma::mat M, float tau, int k);
RcppExport SEXP _SpiecEasi_softSVT(SEXP MSEXP, SEXP tauSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< float >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(softSVT(M, tau, k));
    return rcpp_result_gen;
END_RCPP
}

RcppExport void LPGM_neighborhood(void *, void *, void *, void *, void *, void *, void *, void *, void *);

static const R_CallMethodDef CallEntries[] = {
    {"_SpiecEasi_sqrtmNewt2", (DL_FUNC) &_SpiecEasi_sqrtmNewt2, 3},
    {"_SpiecEasi_SOFTTHRESH2", (DL_FUNC) &_SpiecEasi_SOFTTHRESH2, 3},
    {"_SpiecEasi_svdPowSym", (DL_FUNC) &_SpiecEasi_svdPowSym, 6},
    {"_SpiecEasi_softSVT3", (DL_FUNC) &_SpiecEasi_softSVT3, 3},
    {"_SpiecEasi_softSVT2", (DL_FUNC) &_SpiecEasi_softSVT2, 3},
    {"_SpiecEasi_ADMM", (DL_FUNC) &_SpiecEasi_ADMM, 15},
    {"_SpiecEasi_MATAVE2", (DL_FUNC) &_SpiecEasi_MATAVE2, 2},
    {"_SpiecEasi_MATAVE3", (DL_FUNC) &_SpiecEasi_MATAVE3, 3},
    {"_SpiecEasi_sqrtmNewt", (DL_FUNC) &_SpiecEasi_sqrtmNewt, 3},
    {"_SpiecEasi_solveCpp", (DL_FUNC) &_SpiecEasi_solveCpp, 2},
    {"_SpiecEasi_SOFTTHRESH", (DL_FUNC) &_SpiecEasi_SOFTTHRESH, 3},
    {"_SpiecEasi_softSVT", (DL_FUNC) &_SpiecEasi_softSVT, 3},
    {"LPGM_neighborhood", (DL_FUNC) &LPGM_neighborhood, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_SpiecEasi(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
